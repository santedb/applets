<?xml version="1.0" encoding="utf-8" ?>
<BiDataFlowDefinition xmlns="http://santedb.org/bi" id="org.santedb.bi.datamart.core.entities">
  <parameters>
    <ref name="input" />
    <ref name="output" />
  </parameters>
  <pipeline>
    <log name="log_start" priority="Verbose">Start Entities {{input}}</log>
    <reader name="source_entities">
      <connection ref="input" />
      <sql>
        <add>
          <providers>
            <invariant>npgsql</invariant>
            <invariant>FirebirdSQL</invariant>
            <invariant>sqlite</invariant>
          </providers>
          <![CDATA[ 
            SELECT 
                ENT_VRSN_TBL.ENT_ID,
                ENT_VRSN_TBL.ENT_VRSN_ID AS VERSION,
                CLS.MNEMONIC AS CLASS,
                DTR.MNEMONIC AS DETERMINER,
                TYP.MNEMONIC AS TYPE,
                TPL_DEF_TBL.MNEMONIC AS TEMPLATE,
                GEO_TBL.LAT,
                GEO_TBL.LNG,
                ENT_VRSN_TBL.CRT_UTC AS CREATED_TIME,
                CRT_PROV_TBL.USR_ID AS CREATED_BY,
                ENT_VRSN_TBL.OBSLT_UTC AS OBSOLETE_TIME,
                OBS_PROV_TBL.USR_ID AS OBSOLETE_BY
            FROM
                ENT_VRSN_TBL
                INNER JOIN CD_VRSN_TBL CLS ON (CLS_CD_ID = CLS.CD_ID AND CLS.HEAD = TRUE)
                INNER JOIN CD_VRSN_TBL DTR ON (DTR_CD_ID = DTR.CD_ID AND DTR.HEAD = TRUE)
                INNER JOIN SEC_PROV_TBL CRT_PROV_TBL ON (ENT_VRSN_TBL.CRT_PROV_ID = CRT_PROV_TBL.PROV_ID)
                LEFT JOIN SEC_PROV_TBL OBS_PROV_TBL ON (ENT_VRSN_TBL.OBSLT_PROV_ID = OBS_PROV_TBL.PROV_ID)
                LEFT JOIN CD_VRSN_TBL TYP ON (TYP_CD_ID = TYP.CD_ID AND TYP.HEAD = TRUE)
                LEFT JOIN GEO_TBL ON (GEO_TBL.GEO_ID = ENT_VRSN_TBL.GEO_ID)
                LEFT JOIN TPL_DEF_TBL ON (TPL_DEF_TBL.TPL_ID = ENT_VRSN_TBL.TPL_ID)
            WHERE
                ENT_VRSN_TBL.HEAD = TRUE
                        ]]>
        </add>
      </sql>
    </reader>
    <writer truncate="true" mode="insert" name="write_entities">
      <input ref="source_entities" />
      <connection ref="output" />
      <target ref="ENT_TBL" />
    </writer>
    <filter name="filter_rejects">
      <input ref="write_entities" />
      <all>
        <when field="$reject" op="eq">
          <bool>true</bool>
        </when>
      </all>
    </filter>
    <halt name="halt_rejects">
      <input ref="filter_rejects" />
      Halting execution - {{ ent_id }} rejected {{ $reject.reason }}
    </halt>
  </pipeline>
</BiDataFlowDefinition>